/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface EclAccordion {
        "clickedItem": HTMLElement;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclAccordionItem {
        "expanded": boolean;
        "itemId": string;
        "label": string;
        /**
          * @default ''
         */
        "labelCollapsed": string;
        /**
          * @default ''
         */
        "labelExpanded": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclBanner {
        "bannerTitle": string;
        /**
          * @default false
         */
        "centered": boolean;
        "credit": string;
        /**
          * @default false
         */
        "ctaClicked": boolean;
        "ctaLabel": string;
        "ctaLink": string;
        /**
          * @default false
         */
        "external": boolean;
        /**
          * @default false
         */
        "fullWidth": boolean;
        "image": string;
        "imageAlt": string;
        /**
          * @default 'm'
         */
        "size": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'display'
         */
        "variant": string;
    }
    interface EclBlockquote {
        "author": string;
        "image": string;
        "imageAlt": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclBreadcrumb {
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default 2
         */
        "minItemsRight": number;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclBreadcrumbItem {
        /**
          * @default ''
         */
        "buttonAriaLabel": string;
        /**
          * @default false
         */
        "currentPage": boolean;
        /**
          * @default false
         */
        "ellipsis": boolean;
        "path": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "variant": string;
    }
    interface EclButton {
        "ariaControls": string;
        /**
          * @default false
         */
        "hideLabel": boolean;
        "itemId": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'submit'
         */
        "type": string;
        /**
          * @default 'primary'
         */
        "variant": string;
    }
    interface EclCard {
        "image": string;
        "imageAlt": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclCarousel {
        "carouselId": string;
        /**
          * @default 'of'
         */
        "counterLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "slidesNumber": number;
        /**
          * @default 'Go to slide %d'
         */
        "srNavigation": string;
        /**
          * @default 'Next slides'
         */
        "srNext": string;
        /**
          * @default 'Pause carousel'
         */
        "srPause": string;
        /**
          * @default 'Play carousel'
         */
        "srPlay": string;
        /**
          * @default 'Prev slides'
         */
        "srPrevious": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclCarouselItem {
        "ariaLabel": string;
        /**
          * @default ''
         */
        "bannerTitle": string;
        /**
          * @default ''
         */
        "bannerVariant": string;
        "centered": boolean;
        "ctaLabel": string;
        "ctaLink": string;
        /**
          * @default ''
         */
        "image": string;
        /**
          * @default 'm'
         */
        "size": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclCategoryFilter {
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclCategoryFilterItem {
        /**
          * @default false
         */
        "expanded": boolean;
        "label": string;
        "lastClicked": HTMLElement;
        "level": number;
        "path": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default false
         */
        "subItems": boolean;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclContentBlock {
        /**
          * @default false
         */
        "eclScript": boolean;
        "hasDescription": boolean;
        "hasLabels": boolean;
        "hasLinks": boolean;
        "hasLists": boolean;
        "hasSecondaryLinks": boolean;
        "hasTitle": boolean;
        "metaPrimary": string;
        "metaSecondary": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclContentItem {
        /**
          * @default 'left'
         */
        "imagePosition": string;
        /**
          * @default 'medium'
         */
        "imageSize": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclDateBlock {
        "dateTime": string;
        "day": string;
        "month": string;
        "monthFull": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'default'
         */
        "variant": string;
        "year": string;
    }
    interface EclDatepicker {
        /**
          * @default 'DD-MM-YYYY'
         */
        "dateFormat": string;
        "defaultValue": string;
        /**
          * @default false
         */
        "disabled": boolean;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        "name": string;
        /**
          * @default 'DD-MM-YYYY'
         */
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "type": string;
        /**
          * @default 40
         */
        "yearRange": number;
    }
    interface EclDescriptionList {
        /**
          * @default false
         */
        "eclScript": boolean;
        "moreLabel": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'vertical'
         */
        "variant": string;
        "visibleItems": number;
    }
    interface EclDescriptionListDefinition {
        /**
          * @default false
         */
        "collapsible": boolean;
        "items": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'text'
         */
        "type": string;
    }
    interface EclDescriptionListTerm {
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclExpandable {
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default false
         */
        "isExpanded": boolean;
        /**
          * @default ''
         */
        "labelCollapsed": string;
        /**
          * @default ''
         */
        "labelExpanded": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclFactFigures {
        /**
          * @default 3
         */
        "columns": number;
        /**
          * @default true
         */
        "displayIcons": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclFactFiguresItem {
        "icon": string;
        "iconTransform": string;
        "itemTitle": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "value": string;
    }
    interface EclFeaturedItem {
        /**
          * @default 'ecl-featured-item__container'
         */
        "defaultContainerClass": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "image": string;
        "itemTitle": string;
        "mediaCaption": string;
        /**
          * @default 'left'
         */
        "position": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclFile {
        "ariaLabel": string;
        "detailMeta": string;
        "downloadLabel": string;
        "downloadLink": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "fileTitle": string;
        "image": string;
        "imageAlt": string;
        "labels": string;
        "language": string;
        "meta": string;
        "styleClass": string;
        "taxonomies": string;
        "taxonomiesLabel": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclFileTranslations {
        /**
          * @default false
         */
        "others": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "toggleLabel": string;
    }
    interface EclFileTranslationsItem {
        "ariaLabel": string;
        "downloadLabel": string;
        "downloadLink": string;
        "fileTitle": string;
        "language": string;
        "meta": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclFileUpload {
        "buttonChooseLabel": string;
        "buttonReplaceLabel": string;
        "defaultValue": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "eclScript": boolean;
        "helperId": string;
        "helperText": string;
        "inputClass": string;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        "label": string;
        /**
          * @default false
         */
        "multiple": boolean;
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "type": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclFooter {
        "description": string;
        "logoAlt": string;
        "logoAriaLabel": string;
        "logoLangCode": string;
        "logoLink": string;
        "logoTitle": string;
        "siteName": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "variant": string;
    }
    interface EclFooterItem {
        "ariaLabel": string;
        "link": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclFormGroup {
        "ariaLabelOptional": string;
        "ariaLabelRequired": string;
        "helperId": string;
        "helperText": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default 'error'
         */
        "invalidIcon": string;
        "invalidText": string;
        "label": string;
        "labelClass": string;
        /**
          * @default 'label'
         */
        "labelTag": string;
        "name": string;
        "optionalText": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * @default '*'
         */
        "requiredText": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'div'
         */
        "tag": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclGallery {
        "ariaLabel": string;
        "closeLabel": string;
        "counterLabel": string;
        "counterSeparator": string;
        "description": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default true
         */
        "expandable": boolean;
        "footerLinkLabel": string;
        "footerLinkPath": string;
        /**
          * @default ''
         */
        "fullScreenLabel": string;
        /**
          * @default false
         */
        "fullWidth": boolean;
        "meta": string;
        "nextLabel": string;
        /**
          * @default false
         */
        "noOverlay": boolean;
        "prevLabel": string;
        "shareLabel": string;
        "slidesNumber": number;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "viewAllExpandedLabel": string;
        "viewAllLabel": string;
        /**
          * @default 8
         */
        "visibleItems": number;
    }
    interface EclGalleryItem {
        "icon": string;
        "imageAlt": string;
        "mediaHref": string;
        "mediaIframeHref": string;
        "mediaSharePath": string;
        "meta": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'image'
         */
        "type": string;
    }
    interface EclGrid {
        "breakpoint": string;
        /**
          * @default 12
         */
        "columns": number;
        /**
          * @default false
         */
        "container": boolean;
        /**
          * @default false
         */
        "row": boolean;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclHeroBanner {
        "bannerTitle": string;
        /**
          * @default true
         */
        "centered": boolean;
        "credit": string;
        "ctaLabel": string;
        "ctaLink": string;
        /**
          * @default false
         */
        "external": boolean;
        /**
          * @default false
         */
        "fullWidth": boolean;
        "image": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'display'
         */
        "variant": string;
    }
    interface EclIcon {
        /**
          * @default ''
         */
        "color": string;
        /**
          * @default ''
         */
        "icon": string;
        "path": string;
        /**
          * @default 'xs'
         */
        "size": string;
        /**
          * @default ''
         */
        "sprite": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default ''
         */
        "titleTag": string;
        /**
          * @default ''
         */
        "transform": string;
    }
    interface EclInpageNavigation {
        /**
          * @default false
         */
        "eclScript": boolean;
        "inpageId": string;
        "inpageTitle": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclInpageNavigationItem {
        "path": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclInput {
        "defaultValue": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default false
         */
        "hasChanged": boolean;
        "helperText": string;
        "inputClass": string;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default false
         */
        "isFocused": boolean;
        "label": string;
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "type": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclLabel {
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'low'
         */
        "variant": string;
    }
    interface EclLanguageItem {
        /**
          * @default false
         */
        "active": boolean;
        "langCode": string;
        "language": string;
        "path": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclLink {
        "ariaLabel": string;
        /**
          * @default false
         */
        "download": boolean;
        /**
          * @default false
         */
        "external": boolean;
        "name": string;
        "path": string;
        "styleClass": string;
        "target": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "titleAttr": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclListIllustration {
        /**
          * @default false
         */
        "centered": boolean;
        /**
          * @default 1
         */
        "column": number;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'image'
         */
        "variant": string;
        /**
          * @default false
         */
        "zebra": boolean;
    }
    interface EclListIllustrationItem {
        "icon": string;
        "image": string;
        "imageAlt": string;
        "itemLink": string;
        "itemTitle": string;
        "itemValue": string;
        /**
          * @default 'm'
         */
        "mediaSize": string;
        /**
          * @default false
         */
        "squareImage": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclMediaContainer {
        "description": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default false
         */
        "embeddedMedia": boolean;
        /**
          * @default false
         */
        "fullWidth": boolean;
        /**
          * @default false
         */
        "hasCaption": boolean;
        "image": string;
        "imageAlt": string;
        /**
          * @default ''
         */
        "ratio": string;
        "sources": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "tracks": string;
    }
    interface EclMenu {
        "backLabel": string;
        "closeLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default 'group1'
         */
        "group": string;
        /**
          * @default 2
         */
        "maxLines": number;
        "menuId": string;
        "menuLink": string;
        "menuTitle": string;
        "nextLabel": string;
        "previousLabel": string;
        "siteName": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclMenuItem {
        /**
          * @default false
         */
        "child": boolean;
        /**
          * @default false
         */
        "current": boolean;
        /**
          * @default false
         */
        "external": boolean;
        /**
          * @default false
         */
        "hasChildren": boolean;
        "link": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "triggerAriaLabel": string;
    }
    interface EclMessage {
        "closeLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "messageTitle": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'info'
         */
        "variant": string;
        /**
          * @default true
         */
        "withClose": boolean;
    }
    interface EclModal {
        "closeLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "itemId": string;
        /**
          * @default 'l'
         */
        "size": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "toggleId": string;
        /**
          * @default 'default'
         */
        "variant": string;
        /**
          * @default false
         */
        "withBody": boolean;
        /**
          * @default false
         */
        "withBodyFixed": boolean;
        /**
          * @default false
         */
        "withFooter": boolean;
        /**
          * @default false
         */
        "withHeader": boolean;
    }
    interface EclNavigationList {
        /**
          * @default 2
         */
        "column": number;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclNavigationListItem {
        /**
          * @default true
         */
        "border": boolean;
        "image": string;
        "imageAlt": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclNewsTicker {
        "counterLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "srNext": string;
        "srPause": string;
        "srPlay": string;
        "srPrev": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclNewsTickerItem {
        "path": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclPageBanner {
        "bannerTitle": string;
        /**
          * @default true
         */
        "centered": boolean;
        "credit": string;
        "ctaLabel": string;
        "ctaLink": string;
        /**
          * @default false
         */
        "external": boolean;
        /**
          * @default false
         */
        "fullWidth": boolean;
        "image": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'display'
         */
        "variant": string;
    }
    interface EclPageHeader {
        "headerTitle": string;
        "image": string;
        "imageAlt": string;
        "meta": string;
        "overlay": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "thumbnail": string;
        "thumbnailAlt": string;
        /**
          * @default 'default'
         */
        "variant": string;
    }
    interface EclPagination {
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclPaginationItem {
        "ariaLabel": string;
        "current": boolean;
        "next": boolean;
        "path": string;
        "previous": boolean;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclPicture {
        "image": string;
        "imageAlt": string;
        "imgClass": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclPopover {
        /**
          * @default false
         */
        "eclScript": boolean;
        "icon": string;
        /**
          * @default 'fluid'
         */
        "iconSize": string;
        /**
          * @default ''
         */
        "iconSprite": string;
        "itemId": string;
        /**
          * @default false
         */
        "list": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "toggleLabel": string;
    }
    interface EclPopoverItem {
        "icon": string;
        /**
          * @default 'fluid'
         */
        "iconSize": string;
        /**
          * @default ''
         */
        "iconSprite": string;
        "path": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclRange {
        "defaultValue": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default false
         */
        "hasChanged": boolean;
        "helperId": string;
        "helperText": string;
        "inputClass": string;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default false
         */
        "isFocused": boolean;
        "label": string;
        "max": number;
        "min": number;
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * @default 1
         */
        "step": number;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "valueLabel": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclRatingField {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclRatingStar {
        /**
          * @default false
         */
        "checked": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "hasChanged": boolean;
        /**
          * @default 'star-outline'
         */
        "icon": string;
        /**
          * @default 'star-filled'
         */
        "iconFilled": string;
        /**
          * @default false
         */
        "isFocused": boolean;
        "itemId": string;
        "label": string;
        "name": string;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "value": string;
    }
    interface EclSearchForm {
        "buttonAriaLabel": string;
        "buttonLabel": string;
        /**
          * @default false
         */
        "disabled": boolean;
        "helperId": string;
        "helperText": string;
        "inputDefaultValue": string;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "type": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclSelect {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "eclScript": boolean;
        /**
          * @default false
         */
        "hasChanged": boolean;
        "inputValue": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default false
         */
        "multiple": boolean;
        "multipleAllText": string;
        "multipleClearAllText": string;
        "multipleCloseText": string;
        "multiplePlaceholder": string;
        "multipleSearchNoResultsText": string;
        "multipleSearchText": string;
        "name": string;
        /**
          * @default false
         */
        "required": boolean;
        "selectId": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclSiteHeader {
        "closeLabel": string;
        /**
          * @default false
         */
        "eclScript": boolean;
        "euLabel": string;
        "langCode": string;
        "language": string;
        "languageAriaLabel": string;
        /**
          * @default false
         */
        "languageBlock": boolean;
        "languageId": string;
        "languageTitle": string;
        /**
          * @default false
         */
        "loginBlock": boolean;
        "loginLink": string;
        "loginText": string;
        "logoAlt": string;
        "logoTitle": string;
        "nonEuLabel": string;
        /**
          * @default true
         */
        "searchBlock": boolean;
        "searchPlaceholder": string;
        "searchText": string;
        "siteName": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclSocialMediaFollow {
        "description": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'horizontal'
         */
        "variant": string;
    }
    interface EclSocialMediaFollowItem {
        "icon": string;
        "sharePath": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclSocialMediaShare {
        "description": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'horizontal'
         */
        "variant": string;
    }
    interface EclSocialMediaShareItem {
        "icon": string;
        "sharePath": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclSpacing {
        "breakpoint": string;
        /**
          * @default 'a'
         */
        "direction": string;
        /**
          * @default false
         */
        "horizontal": boolean;
        /**
          * @default false
         */
        "inner": boolean;
        /**
          * @default true
         */
        "outer": boolean;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'm'
         */
        "value": string;
        /**
          * @default false
         */
        "vertical": boolean;
    }
    interface EclSpinner {
        /**
          * @default false
         */
        "centered": boolean;
        /**
          * @default false
         */
        "overlay": boolean;
        /**
          * @default 'medium'
         */
        "size": string;
        /**
          * @default ''
         */
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'primary'
         */
        "variant": string;
        /**
          * @default false
         */
        "visible": boolean;
    }
    interface EclTag {
        /**
          * @default false
         */
        "external": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default ''
         */
        "url": string;
        /**
          * @default 'display'
         */
        "variant": string;
    }
    interface EclText {
        /**
          * @default false
         */
        "isBold": boolean;
        "itemId": string;
        "level": 1 | 2 | 3 | 4 | 5 | undefined;
        "size": 'l' | 'm' | 's' | 'xs' | undefined;
        /**
          * @default ''
         */
        "styleClass": string;
        "tag": 'div' | 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span' | undefined;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclTextarea {
        "defaultValue": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "hasChanged": boolean;
        "inputId": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default false
         */
        "isFocused": boolean;
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * @default 4
         */
        "rows": number;
        "styleClass": string;
        "textareaId": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        /**
          * @default 'm'
         */
        "width": string;
    }
    interface EclTimeline {
        /**
          * @default false
         */
        "eclScript": boolean;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
    }
    interface EclTimelineItem {
        "itemTitle": string;
        "label": string;
        "styleClass": string;
        /**
          * @default 'ec'
         */
        "theme": string;
        "type": string;
    }
}
export interface EclDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclDatepickerElement;
}
export interface EclInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclInputElement;
}
export interface EclRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclRangeElement;
}
export interface EclRatingStarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclRatingStarElement;
}
export interface EclSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclSelectElement;
}
export interface EclTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclTagElement;
}
export interface EclTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEclTextareaElement;
}
declare global {
    interface HTMLEclAccordionElement extends Components.EclAccordion, HTMLStencilElement {
    }
    var HTMLEclAccordionElement: {
        prototype: HTMLEclAccordionElement;
        new (): HTMLEclAccordionElement;
    };
    interface HTMLEclAccordionItemElement extends Components.EclAccordionItem, HTMLStencilElement {
    }
    var HTMLEclAccordionItemElement: {
        prototype: HTMLEclAccordionItemElement;
        new (): HTMLEclAccordionItemElement;
    };
    interface HTMLEclBannerElement extends Components.EclBanner, HTMLStencilElement {
    }
    var HTMLEclBannerElement: {
        prototype: HTMLEclBannerElement;
        new (): HTMLEclBannerElement;
    };
    interface HTMLEclBlockquoteElement extends Components.EclBlockquote, HTMLStencilElement {
    }
    var HTMLEclBlockquoteElement: {
        prototype: HTMLEclBlockquoteElement;
        new (): HTMLEclBlockquoteElement;
    };
    interface HTMLEclBreadcrumbElement extends Components.EclBreadcrumb, HTMLStencilElement {
    }
    var HTMLEclBreadcrumbElement: {
        prototype: HTMLEclBreadcrumbElement;
        new (): HTMLEclBreadcrumbElement;
    };
    interface HTMLEclBreadcrumbItemElement extends Components.EclBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLEclBreadcrumbItemElement: {
        prototype: HTMLEclBreadcrumbItemElement;
        new (): HTMLEclBreadcrumbItemElement;
    };
    interface HTMLEclButtonElement extends Components.EclButton, HTMLStencilElement {
    }
    var HTMLEclButtonElement: {
        prototype: HTMLEclButtonElement;
        new (): HTMLEclButtonElement;
    };
    interface HTMLEclCardElement extends Components.EclCard, HTMLStencilElement {
    }
    var HTMLEclCardElement: {
        prototype: HTMLEclCardElement;
        new (): HTMLEclCardElement;
    };
    interface HTMLEclCarouselElement extends Components.EclCarousel, HTMLStencilElement {
    }
    var HTMLEclCarouselElement: {
        prototype: HTMLEclCarouselElement;
        new (): HTMLEclCarouselElement;
    };
    interface HTMLEclCarouselItemElement extends Components.EclCarouselItem, HTMLStencilElement {
    }
    var HTMLEclCarouselItemElement: {
        prototype: HTMLEclCarouselItemElement;
        new (): HTMLEclCarouselItemElement;
    };
    interface HTMLEclCategoryFilterElement extends Components.EclCategoryFilter, HTMLStencilElement {
    }
    var HTMLEclCategoryFilterElement: {
        prototype: HTMLEclCategoryFilterElement;
        new (): HTMLEclCategoryFilterElement;
    };
    interface HTMLEclCategoryFilterItemElement extends Components.EclCategoryFilterItem, HTMLStencilElement {
    }
    var HTMLEclCategoryFilterItemElement: {
        prototype: HTMLEclCategoryFilterItemElement;
        new (): HTMLEclCategoryFilterItemElement;
    };
    interface HTMLEclContentBlockElement extends Components.EclContentBlock, HTMLStencilElement {
    }
    var HTMLEclContentBlockElement: {
        prototype: HTMLEclContentBlockElement;
        new (): HTMLEclContentBlockElement;
    };
    interface HTMLEclContentItemElement extends Components.EclContentItem, HTMLStencilElement {
    }
    var HTMLEclContentItemElement: {
        prototype: HTMLEclContentItemElement;
        new (): HTMLEclContentItemElement;
    };
    interface HTMLEclDateBlockElement extends Components.EclDateBlock, HTMLStencilElement {
    }
    var HTMLEclDateBlockElement: {
        prototype: HTMLEclDateBlockElement;
        new (): HTMLEclDateBlockElement;
    };
    interface HTMLEclDatepickerElementEventMap {
        "valueChanged": string;
        "focused": void;
        "blurred": void;
    }
    interface HTMLEclDatepickerElement extends Components.EclDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclDatepickerElementEventMap>(type: K, listener: (this: HTMLEclDatepickerElement, ev: EclDatepickerCustomEvent<HTMLEclDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclDatepickerElementEventMap>(type: K, listener: (this: HTMLEclDatepickerElement, ev: EclDatepickerCustomEvent<HTMLEclDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclDatepickerElement: {
        prototype: HTMLEclDatepickerElement;
        new (): HTMLEclDatepickerElement;
    };
    interface HTMLEclDescriptionListElement extends Components.EclDescriptionList, HTMLStencilElement {
    }
    var HTMLEclDescriptionListElement: {
        prototype: HTMLEclDescriptionListElement;
        new (): HTMLEclDescriptionListElement;
    };
    interface HTMLEclDescriptionListDefinitionElement extends Components.EclDescriptionListDefinition, HTMLStencilElement {
    }
    var HTMLEclDescriptionListDefinitionElement: {
        prototype: HTMLEclDescriptionListDefinitionElement;
        new (): HTMLEclDescriptionListDefinitionElement;
    };
    interface HTMLEclDescriptionListTermElement extends Components.EclDescriptionListTerm, HTMLStencilElement {
    }
    var HTMLEclDescriptionListTermElement: {
        prototype: HTMLEclDescriptionListTermElement;
        new (): HTMLEclDescriptionListTermElement;
    };
    interface HTMLEclExpandableElement extends Components.EclExpandable, HTMLStencilElement {
    }
    var HTMLEclExpandableElement: {
        prototype: HTMLEclExpandableElement;
        new (): HTMLEclExpandableElement;
    };
    interface HTMLEclFactFiguresElement extends Components.EclFactFigures, HTMLStencilElement {
    }
    var HTMLEclFactFiguresElement: {
        prototype: HTMLEclFactFiguresElement;
        new (): HTMLEclFactFiguresElement;
    };
    interface HTMLEclFactFiguresItemElement extends Components.EclFactFiguresItem, HTMLStencilElement {
    }
    var HTMLEclFactFiguresItemElement: {
        prototype: HTMLEclFactFiguresItemElement;
        new (): HTMLEclFactFiguresItemElement;
    };
    interface HTMLEclFeaturedItemElement extends Components.EclFeaturedItem, HTMLStencilElement {
    }
    var HTMLEclFeaturedItemElement: {
        prototype: HTMLEclFeaturedItemElement;
        new (): HTMLEclFeaturedItemElement;
    };
    interface HTMLEclFileElement extends Components.EclFile, HTMLStencilElement {
    }
    var HTMLEclFileElement: {
        prototype: HTMLEclFileElement;
        new (): HTMLEclFileElement;
    };
    interface HTMLEclFileTranslationsElement extends Components.EclFileTranslations, HTMLStencilElement {
    }
    var HTMLEclFileTranslationsElement: {
        prototype: HTMLEclFileTranslationsElement;
        new (): HTMLEclFileTranslationsElement;
    };
    interface HTMLEclFileTranslationsItemElement extends Components.EclFileTranslationsItem, HTMLStencilElement {
    }
    var HTMLEclFileTranslationsItemElement: {
        prototype: HTMLEclFileTranslationsItemElement;
        new (): HTMLEclFileTranslationsItemElement;
    };
    interface HTMLEclFileUploadElement extends Components.EclFileUpload, HTMLStencilElement {
    }
    var HTMLEclFileUploadElement: {
        prototype: HTMLEclFileUploadElement;
        new (): HTMLEclFileUploadElement;
    };
    interface HTMLEclFooterElement extends Components.EclFooter, HTMLStencilElement {
    }
    var HTMLEclFooterElement: {
        prototype: HTMLEclFooterElement;
        new (): HTMLEclFooterElement;
    };
    interface HTMLEclFooterItemElement extends Components.EclFooterItem, HTMLStencilElement {
    }
    var HTMLEclFooterItemElement: {
        prototype: HTMLEclFooterItemElement;
        new (): HTMLEclFooterItemElement;
    };
    interface HTMLEclFormGroupElement extends Components.EclFormGroup, HTMLStencilElement {
    }
    var HTMLEclFormGroupElement: {
        prototype: HTMLEclFormGroupElement;
        new (): HTMLEclFormGroupElement;
    };
    interface HTMLEclGalleryElement extends Components.EclGallery, HTMLStencilElement {
    }
    var HTMLEclGalleryElement: {
        prototype: HTMLEclGalleryElement;
        new (): HTMLEclGalleryElement;
    };
    interface HTMLEclGalleryItemElement extends Components.EclGalleryItem, HTMLStencilElement {
    }
    var HTMLEclGalleryItemElement: {
        prototype: HTMLEclGalleryItemElement;
        new (): HTMLEclGalleryItemElement;
    };
    interface HTMLEclGridElement extends Components.EclGrid, HTMLStencilElement {
    }
    var HTMLEclGridElement: {
        prototype: HTMLEclGridElement;
        new (): HTMLEclGridElement;
    };
    interface HTMLEclHeroBannerElement extends Components.EclHeroBanner, HTMLStencilElement {
    }
    var HTMLEclHeroBannerElement: {
        prototype: HTMLEclHeroBannerElement;
        new (): HTMLEclHeroBannerElement;
    };
    interface HTMLEclIconElement extends Components.EclIcon, HTMLStencilElement {
    }
    var HTMLEclIconElement: {
        prototype: HTMLEclIconElement;
        new (): HTMLEclIconElement;
    };
    interface HTMLEclInpageNavigationElement extends Components.EclInpageNavigation, HTMLStencilElement {
    }
    var HTMLEclInpageNavigationElement: {
        prototype: HTMLEclInpageNavigationElement;
        new (): HTMLEclInpageNavigationElement;
    };
    interface HTMLEclInpageNavigationItemElement extends Components.EclInpageNavigationItem, HTMLStencilElement {
    }
    var HTMLEclInpageNavigationItemElement: {
        prototype: HTMLEclInpageNavigationItemElement;
        new (): HTMLEclInpageNavigationItemElement;
    };
    interface HTMLEclInputElementEventMap {
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
        "inputChange": { type: string; value: string };
    }
    interface HTMLEclInputElement extends Components.EclInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclInputElementEventMap>(type: K, listener: (this: HTMLEclInputElement, ev: EclInputCustomEvent<HTMLEclInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclInputElementEventMap>(type: K, listener: (this: HTMLEclInputElement, ev: EclInputCustomEvent<HTMLEclInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclInputElement: {
        prototype: HTMLEclInputElement;
        new (): HTMLEclInputElement;
    };
    interface HTMLEclLabelElement extends Components.EclLabel, HTMLStencilElement {
    }
    var HTMLEclLabelElement: {
        prototype: HTMLEclLabelElement;
        new (): HTMLEclLabelElement;
    };
    interface HTMLEclLanguageItemElement extends Components.EclLanguageItem, HTMLStencilElement {
    }
    var HTMLEclLanguageItemElement: {
        prototype: HTMLEclLanguageItemElement;
        new (): HTMLEclLanguageItemElement;
    };
    interface HTMLEclLinkElement extends Components.EclLink, HTMLStencilElement {
    }
    var HTMLEclLinkElement: {
        prototype: HTMLEclLinkElement;
        new (): HTMLEclLinkElement;
    };
    interface HTMLEclListIllustrationElement extends Components.EclListIllustration, HTMLStencilElement {
    }
    var HTMLEclListIllustrationElement: {
        prototype: HTMLEclListIllustrationElement;
        new (): HTMLEclListIllustrationElement;
    };
    interface HTMLEclListIllustrationItemElement extends Components.EclListIllustrationItem, HTMLStencilElement {
    }
    var HTMLEclListIllustrationItemElement: {
        prototype: HTMLEclListIllustrationItemElement;
        new (): HTMLEclListIllustrationItemElement;
    };
    interface HTMLEclMediaContainerElement extends Components.EclMediaContainer, HTMLStencilElement {
    }
    var HTMLEclMediaContainerElement: {
        prototype: HTMLEclMediaContainerElement;
        new (): HTMLEclMediaContainerElement;
    };
    interface HTMLEclMenuElement extends Components.EclMenu, HTMLStencilElement {
    }
    var HTMLEclMenuElement: {
        prototype: HTMLEclMenuElement;
        new (): HTMLEclMenuElement;
    };
    interface HTMLEclMenuItemElement extends Components.EclMenuItem, HTMLStencilElement {
    }
    var HTMLEclMenuItemElement: {
        prototype: HTMLEclMenuItemElement;
        new (): HTMLEclMenuItemElement;
    };
    interface HTMLEclMessageElement extends Components.EclMessage, HTMLStencilElement {
    }
    var HTMLEclMessageElement: {
        prototype: HTMLEclMessageElement;
        new (): HTMLEclMessageElement;
    };
    interface HTMLEclModalElement extends Components.EclModal, HTMLStencilElement {
    }
    var HTMLEclModalElement: {
        prototype: HTMLEclModalElement;
        new (): HTMLEclModalElement;
    };
    interface HTMLEclNavigationListElement extends Components.EclNavigationList, HTMLStencilElement {
    }
    var HTMLEclNavigationListElement: {
        prototype: HTMLEclNavigationListElement;
        new (): HTMLEclNavigationListElement;
    };
    interface HTMLEclNavigationListItemElement extends Components.EclNavigationListItem, HTMLStencilElement {
    }
    var HTMLEclNavigationListItemElement: {
        prototype: HTMLEclNavigationListItemElement;
        new (): HTMLEclNavigationListItemElement;
    };
    interface HTMLEclNewsTickerElement extends Components.EclNewsTicker, HTMLStencilElement {
    }
    var HTMLEclNewsTickerElement: {
        prototype: HTMLEclNewsTickerElement;
        new (): HTMLEclNewsTickerElement;
    };
    interface HTMLEclNewsTickerItemElement extends Components.EclNewsTickerItem, HTMLStencilElement {
    }
    var HTMLEclNewsTickerItemElement: {
        prototype: HTMLEclNewsTickerItemElement;
        new (): HTMLEclNewsTickerItemElement;
    };
    interface HTMLEclPageBannerElement extends Components.EclPageBanner, HTMLStencilElement {
    }
    var HTMLEclPageBannerElement: {
        prototype: HTMLEclPageBannerElement;
        new (): HTMLEclPageBannerElement;
    };
    interface HTMLEclPageHeaderElement extends Components.EclPageHeader, HTMLStencilElement {
    }
    var HTMLEclPageHeaderElement: {
        prototype: HTMLEclPageHeaderElement;
        new (): HTMLEclPageHeaderElement;
    };
    interface HTMLEclPaginationElement extends Components.EclPagination, HTMLStencilElement {
    }
    var HTMLEclPaginationElement: {
        prototype: HTMLEclPaginationElement;
        new (): HTMLEclPaginationElement;
    };
    interface HTMLEclPaginationItemElement extends Components.EclPaginationItem, HTMLStencilElement {
    }
    var HTMLEclPaginationItemElement: {
        prototype: HTMLEclPaginationItemElement;
        new (): HTMLEclPaginationItemElement;
    };
    interface HTMLEclPictureElement extends Components.EclPicture, HTMLStencilElement {
    }
    var HTMLEclPictureElement: {
        prototype: HTMLEclPictureElement;
        new (): HTMLEclPictureElement;
    };
    interface HTMLEclPopoverElement extends Components.EclPopover, HTMLStencilElement {
    }
    var HTMLEclPopoverElement: {
        prototype: HTMLEclPopoverElement;
        new (): HTMLEclPopoverElement;
    };
    interface HTMLEclPopoverItemElement extends Components.EclPopoverItem, HTMLStencilElement {
    }
    var HTMLEclPopoverItemElement: {
        prototype: HTMLEclPopoverItemElement;
        new (): HTMLEclPopoverItemElement;
    };
    interface HTMLEclRangeElementEventMap {
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
        "inputChange": any;
    }
    interface HTMLEclRangeElement extends Components.EclRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclRangeElementEventMap>(type: K, listener: (this: HTMLEclRangeElement, ev: EclRangeCustomEvent<HTMLEclRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclRangeElementEventMap>(type: K, listener: (this: HTMLEclRangeElement, ev: EclRangeCustomEvent<HTMLEclRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclRangeElement: {
        prototype: HTMLEclRangeElement;
        new (): HTMLEclRangeElement;
    };
    interface HTMLEclRatingFieldElement extends Components.EclRatingField, HTMLStencilElement {
    }
    var HTMLEclRatingFieldElement: {
        prototype: HTMLEclRatingFieldElement;
        new (): HTMLEclRatingFieldElement;
    };
    interface HTMLEclRatingStarElementEventMap {
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
        "inputChange": any;
    }
    interface HTMLEclRatingStarElement extends Components.EclRatingStar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclRatingStarElementEventMap>(type: K, listener: (this: HTMLEclRatingStarElement, ev: EclRatingStarCustomEvent<HTMLEclRatingStarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclRatingStarElementEventMap>(type: K, listener: (this: HTMLEclRatingStarElement, ev: EclRatingStarCustomEvent<HTMLEclRatingStarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclRatingStarElement: {
        prototype: HTMLEclRatingStarElement;
        new (): HTMLEclRatingStarElement;
    };
    interface HTMLEclSearchFormElement extends Components.EclSearchForm, HTMLStencilElement {
    }
    var HTMLEclSearchFormElement: {
        prototype: HTMLEclSearchFormElement;
        new (): HTMLEclSearchFormElement;
    };
    interface HTMLEclSelectElementEventMap {
        "inputChange": any;
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
    }
    interface HTMLEclSelectElement extends Components.EclSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclSelectElementEventMap>(type: K, listener: (this: HTMLEclSelectElement, ev: EclSelectCustomEvent<HTMLEclSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclSelectElementEventMap>(type: K, listener: (this: HTMLEclSelectElement, ev: EclSelectCustomEvent<HTMLEclSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclSelectElement: {
        prototype: HTMLEclSelectElement;
        new (): HTMLEclSelectElement;
    };
    interface HTMLEclSiteHeaderElement extends Components.EclSiteHeader, HTMLStencilElement {
    }
    var HTMLEclSiteHeaderElement: {
        prototype: HTMLEclSiteHeaderElement;
        new (): HTMLEclSiteHeaderElement;
    };
    interface HTMLEclSocialMediaFollowElement extends Components.EclSocialMediaFollow, HTMLStencilElement {
    }
    var HTMLEclSocialMediaFollowElement: {
        prototype: HTMLEclSocialMediaFollowElement;
        new (): HTMLEclSocialMediaFollowElement;
    };
    interface HTMLEclSocialMediaFollowItemElement extends Components.EclSocialMediaFollowItem, HTMLStencilElement {
    }
    var HTMLEclSocialMediaFollowItemElement: {
        prototype: HTMLEclSocialMediaFollowItemElement;
        new (): HTMLEclSocialMediaFollowItemElement;
    };
    interface HTMLEclSocialMediaShareElement extends Components.EclSocialMediaShare, HTMLStencilElement {
    }
    var HTMLEclSocialMediaShareElement: {
        prototype: HTMLEclSocialMediaShareElement;
        new (): HTMLEclSocialMediaShareElement;
    };
    interface HTMLEclSocialMediaShareItemElement extends Components.EclSocialMediaShareItem, HTMLStencilElement {
    }
    var HTMLEclSocialMediaShareItemElement: {
        prototype: HTMLEclSocialMediaShareItemElement;
        new (): HTMLEclSocialMediaShareItemElement;
    };
    interface HTMLEclSpacingElement extends Components.EclSpacing, HTMLStencilElement {
    }
    var HTMLEclSpacingElement: {
        prototype: HTMLEclSpacingElement;
        new (): HTMLEclSpacingElement;
    };
    interface HTMLEclSpinnerElement extends Components.EclSpinner, HTMLStencilElement {
    }
    var HTMLEclSpinnerElement: {
        prototype: HTMLEclSpinnerElement;
        new (): HTMLEclSpinnerElement;
    };
    interface HTMLEclTagElementEventMap {
        "removeTag": boolean;
    }
    interface HTMLEclTagElement extends Components.EclTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclTagElementEventMap>(type: K, listener: (this: HTMLEclTagElement, ev: EclTagCustomEvent<HTMLEclTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclTagElementEventMap>(type: K, listener: (this: HTMLEclTagElement, ev: EclTagCustomEvent<HTMLEclTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclTagElement: {
        prototype: HTMLEclTagElement;
        new (): HTMLEclTagElement;
    };
    interface HTMLEclTextElement extends Components.EclText, HTMLStencilElement {
    }
    var HTMLEclTextElement: {
        prototype: HTMLEclTextElement;
        new (): HTMLEclTextElement;
    };
    interface HTMLEclTextareaElementEventMap {
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
        "inputChange": any;
    }
    interface HTMLEclTextareaElement extends Components.EclTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEclTextareaElementEventMap>(type: K, listener: (this: HTMLEclTextareaElement, ev: EclTextareaCustomEvent<HTMLEclTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEclTextareaElementEventMap>(type: K, listener: (this: HTMLEclTextareaElement, ev: EclTextareaCustomEvent<HTMLEclTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEclTextareaElement: {
        prototype: HTMLEclTextareaElement;
        new (): HTMLEclTextareaElement;
    };
    interface HTMLEclTimelineElement extends Components.EclTimeline, HTMLStencilElement {
    }
    var HTMLEclTimelineElement: {
        prototype: HTMLEclTimelineElement;
        new (): HTMLEclTimelineElement;
    };
    interface HTMLEclTimelineItemElement extends Components.EclTimelineItem, HTMLStencilElement {
    }
    var HTMLEclTimelineItemElement: {
        prototype: HTMLEclTimelineItemElement;
        new (): HTMLEclTimelineItemElement;
    };
    interface HTMLElementTagNameMap {
        "ecl-accordion": HTMLEclAccordionElement;
        "ecl-accordion-item": HTMLEclAccordionItemElement;
        "ecl-banner": HTMLEclBannerElement;
        "ecl-blockquote": HTMLEclBlockquoteElement;
        "ecl-breadcrumb": HTMLEclBreadcrumbElement;
        "ecl-breadcrumb-item": HTMLEclBreadcrumbItemElement;
        "ecl-button": HTMLEclButtonElement;
        "ecl-card": HTMLEclCardElement;
        "ecl-carousel": HTMLEclCarouselElement;
        "ecl-carousel-item": HTMLEclCarouselItemElement;
        "ecl-category-filter": HTMLEclCategoryFilterElement;
        "ecl-category-filter-item": HTMLEclCategoryFilterItemElement;
        "ecl-content-block": HTMLEclContentBlockElement;
        "ecl-content-item": HTMLEclContentItemElement;
        "ecl-date-block": HTMLEclDateBlockElement;
        "ecl-datepicker": HTMLEclDatepickerElement;
        "ecl-description-list": HTMLEclDescriptionListElement;
        "ecl-description-list-definition": HTMLEclDescriptionListDefinitionElement;
        "ecl-description-list-term": HTMLEclDescriptionListTermElement;
        "ecl-expandable": HTMLEclExpandableElement;
        "ecl-fact-figures": HTMLEclFactFiguresElement;
        "ecl-fact-figures-item": HTMLEclFactFiguresItemElement;
        "ecl-featured-item": HTMLEclFeaturedItemElement;
        "ecl-file": HTMLEclFileElement;
        "ecl-file-translations": HTMLEclFileTranslationsElement;
        "ecl-file-translations-item": HTMLEclFileTranslationsItemElement;
        "ecl-file-upload": HTMLEclFileUploadElement;
        "ecl-footer": HTMLEclFooterElement;
        "ecl-footer-item": HTMLEclFooterItemElement;
        "ecl-form-group": HTMLEclFormGroupElement;
        "ecl-gallery": HTMLEclGalleryElement;
        "ecl-gallery-item": HTMLEclGalleryItemElement;
        "ecl-grid": HTMLEclGridElement;
        "ecl-hero-banner": HTMLEclHeroBannerElement;
        "ecl-icon": HTMLEclIconElement;
        "ecl-inpage-navigation": HTMLEclInpageNavigationElement;
        "ecl-inpage-navigation-item": HTMLEclInpageNavigationItemElement;
        "ecl-input": HTMLEclInputElement;
        "ecl-label": HTMLEclLabelElement;
        "ecl-language-item": HTMLEclLanguageItemElement;
        "ecl-link": HTMLEclLinkElement;
        "ecl-list-illustration": HTMLEclListIllustrationElement;
        "ecl-list-illustration-item": HTMLEclListIllustrationItemElement;
        "ecl-media-container": HTMLEclMediaContainerElement;
        "ecl-menu": HTMLEclMenuElement;
        "ecl-menu-item": HTMLEclMenuItemElement;
        "ecl-message": HTMLEclMessageElement;
        "ecl-modal": HTMLEclModalElement;
        "ecl-navigation-list": HTMLEclNavigationListElement;
        "ecl-navigation-list-item": HTMLEclNavigationListItemElement;
        "ecl-news-ticker": HTMLEclNewsTickerElement;
        "ecl-news-ticker-item": HTMLEclNewsTickerItemElement;
        "ecl-page-banner": HTMLEclPageBannerElement;
        "ecl-page-header": HTMLEclPageHeaderElement;
        "ecl-pagination": HTMLEclPaginationElement;
        "ecl-pagination-item": HTMLEclPaginationItemElement;
        "ecl-picture": HTMLEclPictureElement;
        "ecl-popover": HTMLEclPopoverElement;
        "ecl-popover-item": HTMLEclPopoverItemElement;
        "ecl-range": HTMLEclRangeElement;
        "ecl-rating-field": HTMLEclRatingFieldElement;
        "ecl-rating-star": HTMLEclRatingStarElement;
        "ecl-search-form": HTMLEclSearchFormElement;
        "ecl-select": HTMLEclSelectElement;
        "ecl-site-header": HTMLEclSiteHeaderElement;
        "ecl-social-media-follow": HTMLEclSocialMediaFollowElement;
        "ecl-social-media-follow-item": HTMLEclSocialMediaFollowItemElement;
        "ecl-social-media-share": HTMLEclSocialMediaShareElement;
        "ecl-social-media-share-item": HTMLEclSocialMediaShareItemElement;
        "ecl-spacing": HTMLEclSpacingElement;
        "ecl-spinner": HTMLEclSpinnerElement;
        "ecl-tag": HTMLEclTagElement;
        "ecl-text": HTMLEclTextElement;
        "ecl-textarea": HTMLEclTextareaElement;
        "ecl-timeline": HTMLEclTimelineElement;
        "ecl-timeline-item": HTMLEclTimelineItemElement;
    }
}
declare namespace LocalJSX {
    interface EclAccordion {
        "clickedItem"?: HTMLElement;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclAccordionItem {
        "expanded"?: boolean;
        "itemId"?: string;
        "label"?: string;
        /**
          * @default ''
         */
        "labelCollapsed"?: string;
        /**
          * @default ''
         */
        "labelExpanded"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclBanner {
        "bannerTitle"?: string;
        /**
          * @default false
         */
        "centered"?: boolean;
        "credit"?: string;
        /**
          * @default false
         */
        "ctaClicked"?: boolean;
        "ctaLabel"?: string;
        "ctaLink"?: string;
        /**
          * @default false
         */
        "external"?: boolean;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        "image"?: string;
        "imageAlt"?: string;
        /**
          * @default 'm'
         */
        "size"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'display'
         */
        "variant"?: string;
    }
    interface EclBlockquote {
        "author"?: string;
        "image"?: string;
        "imageAlt"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclBreadcrumb {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default 2
         */
        "minItemsRight"?: number;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclBreadcrumbItem {
        /**
          * @default ''
         */
        "buttonAriaLabel"?: string;
        /**
          * @default false
         */
        "currentPage"?: boolean;
        /**
          * @default false
         */
        "ellipsis"?: boolean;
        "path"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "variant"?: string;
    }
    interface EclButton {
        "ariaControls"?: string;
        /**
          * @default false
         */
        "hideLabel"?: boolean;
        "itemId"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'submit'
         */
        "type"?: string;
        /**
          * @default 'primary'
         */
        "variant"?: string;
    }
    interface EclCard {
        "image"?: string;
        "imageAlt"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclCarousel {
        "carouselId"?: string;
        /**
          * @default 'of'
         */
        "counterLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "slidesNumber"?: number;
        /**
          * @default 'Go to slide %d'
         */
        "srNavigation"?: string;
        /**
          * @default 'Next slides'
         */
        "srNext"?: string;
        /**
          * @default 'Pause carousel'
         */
        "srPause"?: string;
        /**
          * @default 'Play carousel'
         */
        "srPlay"?: string;
        /**
          * @default 'Prev slides'
         */
        "srPrevious"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclCarouselItem {
        "ariaLabel"?: string;
        /**
          * @default ''
         */
        "bannerTitle"?: string;
        /**
          * @default ''
         */
        "bannerVariant"?: string;
        "centered"?: boolean;
        "ctaLabel"?: string;
        "ctaLink"?: string;
        /**
          * @default ''
         */
        "image"?: string;
        /**
          * @default 'm'
         */
        "size"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclCategoryFilter {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclCategoryFilterItem {
        /**
          * @default false
         */
        "expanded"?: boolean;
        "label"?: string;
        "lastClicked"?: HTMLElement;
        "level"?: number;
        "path"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default false
         */
        "subItems"?: boolean;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclContentBlock {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "hasDescription"?: boolean;
        "hasLabels"?: boolean;
        "hasLinks"?: boolean;
        "hasLists"?: boolean;
        "hasSecondaryLinks"?: boolean;
        "hasTitle"?: boolean;
        "metaPrimary"?: string;
        "metaSecondary"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclContentItem {
        /**
          * @default 'left'
         */
        "imagePosition"?: string;
        /**
          * @default 'medium'
         */
        "imageSize"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclDateBlock {
        "dateTime"?: string;
        "day"?: string;
        "month"?: string;
        "monthFull"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
        "year"?: string;
    }
    interface EclDatepicker {
        /**
          * @default 'DD-MM-YYYY'
         */
        "dateFormat"?: string;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "name"?: string;
        "onBlurred"?: (event: EclDatepickerCustomEvent<void>) => void;
        "onFocused"?: (event: EclDatepickerCustomEvent<void>) => void;
        "onValueChanged"?: (event: EclDatepickerCustomEvent<string>) => void;
        /**
          * @default 'DD-MM-YYYY'
         */
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "type"?: string;
        /**
          * @default 40
         */
        "yearRange"?: number;
    }
    interface EclDescriptionList {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "moreLabel"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'vertical'
         */
        "variant"?: string;
        "visibleItems"?: number;
    }
    interface EclDescriptionListDefinition {
        /**
          * @default false
         */
        "collapsible"?: boolean;
        "items"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'text'
         */
        "type"?: string;
    }
    interface EclDescriptionListTerm {
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclExpandable {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default false
         */
        "isExpanded"?: boolean;
        /**
          * @default ''
         */
        "labelCollapsed"?: string;
        /**
          * @default ''
         */
        "labelExpanded"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclFactFigures {
        /**
          * @default 3
         */
        "columns"?: number;
        /**
          * @default true
         */
        "displayIcons"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclFactFiguresItem {
        "icon"?: string;
        "iconTransform"?: string;
        "itemTitle"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "value"?: string;
    }
    interface EclFeaturedItem {
        /**
          * @default 'ecl-featured-item__container'
         */
        "defaultContainerClass"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "image"?: string;
        "itemTitle"?: string;
        "mediaCaption"?: string;
        /**
          * @default 'left'
         */
        "position"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclFile {
        "ariaLabel"?: string;
        "detailMeta"?: string;
        "downloadLabel"?: string;
        "downloadLink"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "fileTitle"?: string;
        "image"?: string;
        "imageAlt"?: string;
        "labels"?: string;
        "language"?: string;
        "meta"?: string;
        "styleClass"?: string;
        "taxonomies"?: string;
        "taxonomiesLabel"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclFileTranslations {
        /**
          * @default false
         */
        "others"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "toggleLabel"?: string;
    }
    interface EclFileTranslationsItem {
        "ariaLabel"?: string;
        "downloadLabel"?: string;
        "downloadLink"?: string;
        "fileTitle"?: string;
        "language"?: string;
        "meta"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclFileUpload {
        "buttonChooseLabel"?: string;
        "buttonReplaceLabel"?: string;
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "helperId"?: string;
        "helperText"?: string;
        "inputClass"?: string;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "label"?: string;
        /**
          * @default false
         */
        "multiple"?: boolean;
        "name"?: string;
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "type"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclFooter {
        "description"?: string;
        "logoAlt"?: string;
        "logoAriaLabel"?: string;
        "logoLangCode"?: string;
        "logoLink"?: string;
        "logoTitle"?: string;
        "siteName"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "variant"?: string;
    }
    interface EclFooterItem {
        "ariaLabel"?: string;
        "link"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclFormGroup {
        "ariaLabelOptional"?: string;
        "ariaLabelRequired"?: string;
        "helperId"?: string;
        "helperText"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        /**
          * @default 'error'
         */
        "invalidIcon"?: string;
        "invalidText"?: string;
        "label"?: string;
        "labelClass"?: string;
        /**
          * @default 'label'
         */
        "labelTag"?: string;
        "name"?: string;
        "optionalText"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * @default '*'
         */
        "requiredText"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'div'
         */
        "tag"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclGallery {
        "ariaLabel"?: string;
        "closeLabel"?: string;
        "counterLabel"?: string;
        "counterSeparator"?: string;
        "description"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default true
         */
        "expandable"?: boolean;
        "footerLinkLabel"?: string;
        "footerLinkPath"?: string;
        /**
          * @default ''
         */
        "fullScreenLabel"?: string;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        "meta"?: string;
        "nextLabel"?: string;
        /**
          * @default false
         */
        "noOverlay"?: boolean;
        "prevLabel"?: string;
        "shareLabel"?: string;
        "slidesNumber"?: number;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "viewAllExpandedLabel"?: string;
        "viewAllLabel"?: string;
        /**
          * @default 8
         */
        "visibleItems"?: number;
    }
    interface EclGalleryItem {
        "icon"?: string;
        "imageAlt"?: string;
        "mediaHref"?: string;
        "mediaIframeHref"?: string;
        "mediaSharePath"?: string;
        "meta"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'image'
         */
        "type"?: string;
    }
    interface EclGrid {
        "breakpoint"?: string;
        /**
          * @default 12
         */
        "columns"?: number;
        /**
          * @default false
         */
        "container"?: boolean;
        /**
          * @default false
         */
        "row"?: boolean;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclHeroBanner {
        "bannerTitle"?: string;
        /**
          * @default true
         */
        "centered"?: boolean;
        "credit"?: string;
        "ctaLabel"?: string;
        "ctaLink"?: string;
        /**
          * @default false
         */
        "external"?: boolean;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        "image"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'display'
         */
        "variant"?: string;
    }
    interface EclIcon {
        /**
          * @default ''
         */
        "color"?: string;
        /**
          * @default ''
         */
        "icon"?: string;
        "path"?: string;
        /**
          * @default 'xs'
         */
        "size"?: string;
        /**
          * @default ''
         */
        "sprite"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default ''
         */
        "titleTag"?: string;
        /**
          * @default ''
         */
        "transform"?: string;
    }
    interface EclInpageNavigation {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "inpageId"?: string;
        "inpageTitle"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclInpageNavigationItem {
        "path"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclInput {
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default false
         */
        "hasChanged"?: boolean;
        "helperText"?: string;
        "inputClass"?: string;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        /**
          * @default false
         */
        "isFocused"?: boolean;
        "label"?: string;
        "name"?: string;
        "onInputBlur"?: (event: EclInputCustomEvent<FocusEvent>) => void;
        "onInputChange"?: (event: EclInputCustomEvent<{ type: string; value: string }>) => void;
        "onInputFocus"?: (event: EclInputCustomEvent<FocusEvent>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "type"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclLabel {
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'low'
         */
        "variant"?: string;
    }
    interface EclLanguageItem {
        /**
          * @default false
         */
        "active"?: boolean;
        "langCode"?: string;
        "language"?: string;
        "path"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclLink {
        "ariaLabel"?: string;
        /**
          * @default false
         */
        "download"?: boolean;
        /**
          * @default false
         */
        "external"?: boolean;
        "name"?: string;
        "path"?: string;
        "styleClass"?: string;
        "target"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "titleAttr"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclListIllustration {
        /**
          * @default false
         */
        "centered"?: boolean;
        /**
          * @default 1
         */
        "column"?: number;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'image'
         */
        "variant"?: string;
        /**
          * @default false
         */
        "zebra"?: boolean;
    }
    interface EclListIllustrationItem {
        "icon"?: string;
        "image"?: string;
        "imageAlt"?: string;
        "itemLink"?: string;
        "itemTitle"?: string;
        "itemValue"?: string;
        /**
          * @default 'm'
         */
        "mediaSize"?: string;
        /**
          * @default false
         */
        "squareImage"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclMediaContainer {
        "description"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default false
         */
        "embeddedMedia"?: boolean;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * @default false
         */
        "hasCaption"?: boolean;
        "image"?: string;
        "imageAlt"?: string;
        /**
          * @default ''
         */
        "ratio"?: string;
        "sources"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "tracks"?: string;
    }
    interface EclMenu {
        "backLabel"?: string;
        "closeLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default 'group1'
         */
        "group"?: string;
        /**
          * @default 2
         */
        "maxLines"?: number;
        "menuId"?: string;
        "menuLink"?: string;
        "menuTitle"?: string;
        "nextLabel"?: string;
        "previousLabel"?: string;
        "siteName"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclMenuItem {
        /**
          * @default false
         */
        "child"?: boolean;
        /**
          * @default false
         */
        "current"?: boolean;
        /**
          * @default false
         */
        "external"?: boolean;
        /**
          * @default false
         */
        "hasChildren"?: boolean;
        "link"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "triggerAriaLabel"?: string;
    }
    interface EclMessage {
        "closeLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "messageTitle"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'info'
         */
        "variant"?: string;
        /**
          * @default true
         */
        "withClose"?: boolean;
    }
    interface EclModal {
        "closeLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "itemId"?: string;
        /**
          * @default 'l'
         */
        "size"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "toggleId"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
        /**
          * @default false
         */
        "withBody"?: boolean;
        /**
          * @default false
         */
        "withBodyFixed"?: boolean;
        /**
          * @default false
         */
        "withFooter"?: boolean;
        /**
          * @default false
         */
        "withHeader"?: boolean;
    }
    interface EclNavigationList {
        /**
          * @default 2
         */
        "column"?: number;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclNavigationListItem {
        /**
          * @default true
         */
        "border"?: boolean;
        "image"?: string;
        "imageAlt"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclNewsTicker {
        "counterLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "srNext"?: string;
        "srPause"?: string;
        "srPlay"?: string;
        "srPrev"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclNewsTickerItem {
        "path"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclPageBanner {
        "bannerTitle"?: string;
        /**
          * @default true
         */
        "centered"?: boolean;
        "credit"?: string;
        "ctaLabel"?: string;
        "ctaLink"?: string;
        /**
          * @default false
         */
        "external"?: boolean;
        /**
          * @default false
         */
        "fullWidth"?: boolean;
        "image"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'display'
         */
        "variant"?: string;
    }
    interface EclPageHeader {
        "headerTitle"?: string;
        "image"?: string;
        "imageAlt"?: string;
        "meta"?: string;
        "overlay"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "thumbnail"?: string;
        "thumbnailAlt"?: string;
        /**
          * @default 'default'
         */
        "variant"?: string;
    }
    interface EclPagination {
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclPaginationItem {
        "ariaLabel"?: string;
        "current"?: boolean;
        "next"?: boolean;
        "path"?: string;
        "previous"?: boolean;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclPicture {
        "image"?: string;
        "imageAlt"?: string;
        "imgClass"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclPopover {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "icon"?: string;
        /**
          * @default 'fluid'
         */
        "iconSize"?: string;
        /**
          * @default ''
         */
        "iconSprite"?: string;
        "itemId"?: string;
        /**
          * @default false
         */
        "list"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "toggleLabel"?: string;
    }
    interface EclPopoverItem {
        "icon"?: string;
        /**
          * @default 'fluid'
         */
        "iconSize"?: string;
        /**
          * @default ''
         */
        "iconSprite"?: string;
        "path"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclRange {
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default false
         */
        "hasChanged"?: boolean;
        "helperId"?: string;
        "helperText"?: string;
        "inputClass"?: string;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        /**
          * @default false
         */
        "isFocused"?: boolean;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "onInputBlur"?: (event: EclRangeCustomEvent<FocusEvent>) => void;
        "onInputChange"?: (event: EclRangeCustomEvent<any>) => void;
        "onInputFocus"?: (event: EclRangeCustomEvent<FocusEvent>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * @default 1
         */
        "step"?: number;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "valueLabel"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclRatingField {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclRatingStar {
        /**
          * @default false
         */
        "checked"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "hasChanged"?: boolean;
        /**
          * @default 'star-outline'
         */
        "icon"?: string;
        /**
          * @default 'star-filled'
         */
        "iconFilled"?: string;
        /**
          * @default false
         */
        "isFocused"?: boolean;
        "itemId"?: string;
        "label"?: string;
        "name"?: string;
        "onInputBlur"?: (event: EclRatingStarCustomEvent<FocusEvent>) => void;
        "onInputChange"?: (event: EclRatingStarCustomEvent<any>) => void;
        "onInputFocus"?: (event: EclRatingStarCustomEvent<FocusEvent>) => void;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "value"?: string;
    }
    interface EclSearchForm {
        "buttonAriaLabel"?: string;
        "buttonLabel"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "helperId"?: string;
        "helperText"?: string;
        "inputDefaultValue"?: string;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        "name"?: string;
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "type"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclSelect {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        /**
          * @default false
         */
        "hasChanged"?: boolean;
        "inputValue"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        /**
          * @default false
         */
        "multiple"?: boolean;
        "multipleAllText"?: string;
        "multipleClearAllText"?: string;
        "multipleCloseText"?: string;
        "multiplePlaceholder"?: string;
        "multipleSearchNoResultsText"?: string;
        "multipleSearchText"?: string;
        "name"?: string;
        "onInputBlur"?: (event: EclSelectCustomEvent<FocusEvent>) => void;
        "onInputChange"?: (event: EclSelectCustomEvent<any>) => void;
        "onInputFocus"?: (event: EclSelectCustomEvent<FocusEvent>) => void;
        /**
          * @default false
         */
        "required"?: boolean;
        "selectId"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclSiteHeader {
        "closeLabel"?: string;
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "euLabel"?: string;
        "langCode"?: string;
        "language"?: string;
        "languageAriaLabel"?: string;
        /**
          * @default false
         */
        "languageBlock"?: boolean;
        "languageId"?: string;
        "languageTitle"?: string;
        /**
          * @default false
         */
        "loginBlock"?: boolean;
        "loginLink"?: string;
        "loginText"?: string;
        "logoAlt"?: string;
        "logoTitle"?: string;
        "nonEuLabel"?: string;
        /**
          * @default true
         */
        "searchBlock"?: boolean;
        "searchPlaceholder"?: string;
        "searchText"?: string;
        "siteName"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclSocialMediaFollow {
        "description"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'horizontal'
         */
        "variant"?: string;
    }
    interface EclSocialMediaFollowItem {
        "icon"?: string;
        "sharePath"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclSocialMediaShare {
        "description"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'horizontal'
         */
        "variant"?: string;
    }
    interface EclSocialMediaShareItem {
        "icon"?: string;
        "sharePath"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclSpacing {
        "breakpoint"?: string;
        /**
          * @default 'a'
         */
        "direction"?: string;
        /**
          * @default false
         */
        "horizontal"?: boolean;
        /**
          * @default false
         */
        "inner"?: boolean;
        /**
          * @default true
         */
        "outer"?: boolean;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'm'
         */
        "value"?: string;
        /**
          * @default false
         */
        "vertical"?: boolean;
    }
    interface EclSpinner {
        /**
          * @default false
         */
        "centered"?: boolean;
        /**
          * @default false
         */
        "overlay"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: string;
        /**
          * @default ''
         */
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'primary'
         */
        "variant"?: string;
        /**
          * @default false
         */
        "visible"?: boolean;
    }
    interface EclTag {
        /**
          * @default false
         */
        "external"?: boolean;
        "onRemoveTag"?: (event: EclTagCustomEvent<boolean>) => void;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default ''
         */
        "url"?: string;
        /**
          * @default 'display'
         */
        "variant"?: string;
    }
    interface EclText {
        /**
          * @default false
         */
        "isBold"?: boolean;
        "itemId"?: string;
        "level"?: 1 | 2 | 3 | 4 | 5 | undefined;
        "size"?: 'l' | 'm' | 's' | 'xs' | undefined;
        /**
          * @default ''
         */
        "styleClass"?: string;
        "tag"?: 'div' | 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span' | undefined;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclTextarea {
        "defaultValue"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "hasChanged"?: boolean;
        "inputId"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        /**
          * @default false
         */
        "isFocused"?: boolean;
        "name"?: string;
        "onInputBlur"?: (event: EclTextareaCustomEvent<FocusEvent>) => void;
        "onInputChange"?: (event: EclTextareaCustomEvent<any>) => void;
        "onInputFocus"?: (event: EclTextareaCustomEvent<FocusEvent>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * @default 4
         */
        "rows"?: number;
        "styleClass"?: string;
        "textareaId"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        /**
          * @default 'm'
         */
        "width"?: string;
    }
    interface EclTimeline {
        /**
          * @default false
         */
        "eclScript"?: boolean;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
    }
    interface EclTimelineItem {
        "itemTitle"?: string;
        "label"?: string;
        "styleClass"?: string;
        /**
          * @default 'ec'
         */
        "theme"?: string;
        "type"?: string;
    }
    interface IntrinsicElements {
        "ecl-accordion": EclAccordion;
        "ecl-accordion-item": EclAccordionItem;
        "ecl-banner": EclBanner;
        "ecl-blockquote": EclBlockquote;
        "ecl-breadcrumb": EclBreadcrumb;
        "ecl-breadcrumb-item": EclBreadcrumbItem;
        "ecl-button": EclButton;
        "ecl-card": EclCard;
        "ecl-carousel": EclCarousel;
        "ecl-carousel-item": EclCarouselItem;
        "ecl-category-filter": EclCategoryFilter;
        "ecl-category-filter-item": EclCategoryFilterItem;
        "ecl-content-block": EclContentBlock;
        "ecl-content-item": EclContentItem;
        "ecl-date-block": EclDateBlock;
        "ecl-datepicker": EclDatepicker;
        "ecl-description-list": EclDescriptionList;
        "ecl-description-list-definition": EclDescriptionListDefinition;
        "ecl-description-list-term": EclDescriptionListTerm;
        "ecl-expandable": EclExpandable;
        "ecl-fact-figures": EclFactFigures;
        "ecl-fact-figures-item": EclFactFiguresItem;
        "ecl-featured-item": EclFeaturedItem;
        "ecl-file": EclFile;
        "ecl-file-translations": EclFileTranslations;
        "ecl-file-translations-item": EclFileTranslationsItem;
        "ecl-file-upload": EclFileUpload;
        "ecl-footer": EclFooter;
        "ecl-footer-item": EclFooterItem;
        "ecl-form-group": EclFormGroup;
        "ecl-gallery": EclGallery;
        "ecl-gallery-item": EclGalleryItem;
        "ecl-grid": EclGrid;
        "ecl-hero-banner": EclHeroBanner;
        "ecl-icon": EclIcon;
        "ecl-inpage-navigation": EclInpageNavigation;
        "ecl-inpage-navigation-item": EclInpageNavigationItem;
        "ecl-input": EclInput;
        "ecl-label": EclLabel;
        "ecl-language-item": EclLanguageItem;
        "ecl-link": EclLink;
        "ecl-list-illustration": EclListIllustration;
        "ecl-list-illustration-item": EclListIllustrationItem;
        "ecl-media-container": EclMediaContainer;
        "ecl-menu": EclMenu;
        "ecl-menu-item": EclMenuItem;
        "ecl-message": EclMessage;
        "ecl-modal": EclModal;
        "ecl-navigation-list": EclNavigationList;
        "ecl-navigation-list-item": EclNavigationListItem;
        "ecl-news-ticker": EclNewsTicker;
        "ecl-news-ticker-item": EclNewsTickerItem;
        "ecl-page-banner": EclPageBanner;
        "ecl-page-header": EclPageHeader;
        "ecl-pagination": EclPagination;
        "ecl-pagination-item": EclPaginationItem;
        "ecl-picture": EclPicture;
        "ecl-popover": EclPopover;
        "ecl-popover-item": EclPopoverItem;
        "ecl-range": EclRange;
        "ecl-rating-field": EclRatingField;
        "ecl-rating-star": EclRatingStar;
        "ecl-search-form": EclSearchForm;
        "ecl-select": EclSelect;
        "ecl-site-header": EclSiteHeader;
        "ecl-social-media-follow": EclSocialMediaFollow;
        "ecl-social-media-follow-item": EclSocialMediaFollowItem;
        "ecl-social-media-share": EclSocialMediaShare;
        "ecl-social-media-share-item": EclSocialMediaShareItem;
        "ecl-spacing": EclSpacing;
        "ecl-spinner": EclSpinner;
        "ecl-tag": EclTag;
        "ecl-text": EclText;
        "ecl-textarea": EclTextarea;
        "ecl-timeline": EclTimeline;
        "ecl-timeline-item": EclTimelineItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ecl-accordion": LocalJSX.EclAccordion & JSXBase.HTMLAttributes<HTMLEclAccordionElement>;
            "ecl-accordion-item": LocalJSX.EclAccordionItem & JSXBase.HTMLAttributes<HTMLEclAccordionItemElement>;
            "ecl-banner": LocalJSX.EclBanner & JSXBase.HTMLAttributes<HTMLEclBannerElement>;
            "ecl-blockquote": LocalJSX.EclBlockquote & JSXBase.HTMLAttributes<HTMLEclBlockquoteElement>;
            "ecl-breadcrumb": LocalJSX.EclBreadcrumb & JSXBase.HTMLAttributes<HTMLEclBreadcrumbElement>;
            "ecl-breadcrumb-item": LocalJSX.EclBreadcrumbItem & JSXBase.HTMLAttributes<HTMLEclBreadcrumbItemElement>;
            "ecl-button": LocalJSX.EclButton & JSXBase.HTMLAttributes<HTMLEclButtonElement>;
            "ecl-card": LocalJSX.EclCard & JSXBase.HTMLAttributes<HTMLEclCardElement>;
            "ecl-carousel": LocalJSX.EclCarousel & JSXBase.HTMLAttributes<HTMLEclCarouselElement>;
            "ecl-carousel-item": LocalJSX.EclCarouselItem & JSXBase.HTMLAttributes<HTMLEclCarouselItemElement>;
            "ecl-category-filter": LocalJSX.EclCategoryFilter & JSXBase.HTMLAttributes<HTMLEclCategoryFilterElement>;
            "ecl-category-filter-item": LocalJSX.EclCategoryFilterItem & JSXBase.HTMLAttributes<HTMLEclCategoryFilterItemElement>;
            "ecl-content-block": LocalJSX.EclContentBlock & JSXBase.HTMLAttributes<HTMLEclContentBlockElement>;
            "ecl-content-item": LocalJSX.EclContentItem & JSXBase.HTMLAttributes<HTMLEclContentItemElement>;
            "ecl-date-block": LocalJSX.EclDateBlock & JSXBase.HTMLAttributes<HTMLEclDateBlockElement>;
            "ecl-datepicker": LocalJSX.EclDatepicker & JSXBase.HTMLAttributes<HTMLEclDatepickerElement>;
            "ecl-description-list": LocalJSX.EclDescriptionList & JSXBase.HTMLAttributes<HTMLEclDescriptionListElement>;
            "ecl-description-list-definition": LocalJSX.EclDescriptionListDefinition & JSXBase.HTMLAttributes<HTMLEclDescriptionListDefinitionElement>;
            "ecl-description-list-term": LocalJSX.EclDescriptionListTerm & JSXBase.HTMLAttributes<HTMLEclDescriptionListTermElement>;
            "ecl-expandable": LocalJSX.EclExpandable & JSXBase.HTMLAttributes<HTMLEclExpandableElement>;
            "ecl-fact-figures": LocalJSX.EclFactFigures & JSXBase.HTMLAttributes<HTMLEclFactFiguresElement>;
            "ecl-fact-figures-item": LocalJSX.EclFactFiguresItem & JSXBase.HTMLAttributes<HTMLEclFactFiguresItemElement>;
            "ecl-featured-item": LocalJSX.EclFeaturedItem & JSXBase.HTMLAttributes<HTMLEclFeaturedItemElement>;
            "ecl-file": LocalJSX.EclFile & JSXBase.HTMLAttributes<HTMLEclFileElement>;
            "ecl-file-translations": LocalJSX.EclFileTranslations & JSXBase.HTMLAttributes<HTMLEclFileTranslationsElement>;
            "ecl-file-translations-item": LocalJSX.EclFileTranslationsItem & JSXBase.HTMLAttributes<HTMLEclFileTranslationsItemElement>;
            "ecl-file-upload": LocalJSX.EclFileUpload & JSXBase.HTMLAttributes<HTMLEclFileUploadElement>;
            "ecl-footer": LocalJSX.EclFooter & JSXBase.HTMLAttributes<HTMLEclFooterElement>;
            "ecl-footer-item": LocalJSX.EclFooterItem & JSXBase.HTMLAttributes<HTMLEclFooterItemElement>;
            "ecl-form-group": LocalJSX.EclFormGroup & JSXBase.HTMLAttributes<HTMLEclFormGroupElement>;
            "ecl-gallery": LocalJSX.EclGallery & JSXBase.HTMLAttributes<HTMLEclGalleryElement>;
            "ecl-gallery-item": LocalJSX.EclGalleryItem & JSXBase.HTMLAttributes<HTMLEclGalleryItemElement>;
            "ecl-grid": LocalJSX.EclGrid & JSXBase.HTMLAttributes<HTMLEclGridElement>;
            "ecl-hero-banner": LocalJSX.EclHeroBanner & JSXBase.HTMLAttributes<HTMLEclHeroBannerElement>;
            "ecl-icon": LocalJSX.EclIcon & JSXBase.HTMLAttributes<HTMLEclIconElement>;
            "ecl-inpage-navigation": LocalJSX.EclInpageNavigation & JSXBase.HTMLAttributes<HTMLEclInpageNavigationElement>;
            "ecl-inpage-navigation-item": LocalJSX.EclInpageNavigationItem & JSXBase.HTMLAttributes<HTMLEclInpageNavigationItemElement>;
            "ecl-input": LocalJSX.EclInput & JSXBase.HTMLAttributes<HTMLEclInputElement>;
            "ecl-label": LocalJSX.EclLabel & JSXBase.HTMLAttributes<HTMLEclLabelElement>;
            "ecl-language-item": LocalJSX.EclLanguageItem & JSXBase.HTMLAttributes<HTMLEclLanguageItemElement>;
            "ecl-link": LocalJSX.EclLink & JSXBase.HTMLAttributes<HTMLEclLinkElement>;
            "ecl-list-illustration": LocalJSX.EclListIllustration & JSXBase.HTMLAttributes<HTMLEclListIllustrationElement>;
            "ecl-list-illustration-item": LocalJSX.EclListIllustrationItem & JSXBase.HTMLAttributes<HTMLEclListIllustrationItemElement>;
            "ecl-media-container": LocalJSX.EclMediaContainer & JSXBase.HTMLAttributes<HTMLEclMediaContainerElement>;
            "ecl-menu": LocalJSX.EclMenu & JSXBase.HTMLAttributes<HTMLEclMenuElement>;
            "ecl-menu-item": LocalJSX.EclMenuItem & JSXBase.HTMLAttributes<HTMLEclMenuItemElement>;
            "ecl-message": LocalJSX.EclMessage & JSXBase.HTMLAttributes<HTMLEclMessageElement>;
            "ecl-modal": LocalJSX.EclModal & JSXBase.HTMLAttributes<HTMLEclModalElement>;
            "ecl-navigation-list": LocalJSX.EclNavigationList & JSXBase.HTMLAttributes<HTMLEclNavigationListElement>;
            "ecl-navigation-list-item": LocalJSX.EclNavigationListItem & JSXBase.HTMLAttributes<HTMLEclNavigationListItemElement>;
            "ecl-news-ticker": LocalJSX.EclNewsTicker & JSXBase.HTMLAttributes<HTMLEclNewsTickerElement>;
            "ecl-news-ticker-item": LocalJSX.EclNewsTickerItem & JSXBase.HTMLAttributes<HTMLEclNewsTickerItemElement>;
            "ecl-page-banner": LocalJSX.EclPageBanner & JSXBase.HTMLAttributes<HTMLEclPageBannerElement>;
            "ecl-page-header": LocalJSX.EclPageHeader & JSXBase.HTMLAttributes<HTMLEclPageHeaderElement>;
            "ecl-pagination": LocalJSX.EclPagination & JSXBase.HTMLAttributes<HTMLEclPaginationElement>;
            "ecl-pagination-item": LocalJSX.EclPaginationItem & JSXBase.HTMLAttributes<HTMLEclPaginationItemElement>;
            "ecl-picture": LocalJSX.EclPicture & JSXBase.HTMLAttributes<HTMLEclPictureElement>;
            "ecl-popover": LocalJSX.EclPopover & JSXBase.HTMLAttributes<HTMLEclPopoverElement>;
            "ecl-popover-item": LocalJSX.EclPopoverItem & JSXBase.HTMLAttributes<HTMLEclPopoverItemElement>;
            "ecl-range": LocalJSX.EclRange & JSXBase.HTMLAttributes<HTMLEclRangeElement>;
            "ecl-rating-field": LocalJSX.EclRatingField & JSXBase.HTMLAttributes<HTMLEclRatingFieldElement>;
            "ecl-rating-star": LocalJSX.EclRatingStar & JSXBase.HTMLAttributes<HTMLEclRatingStarElement>;
            "ecl-search-form": LocalJSX.EclSearchForm & JSXBase.HTMLAttributes<HTMLEclSearchFormElement>;
            "ecl-select": LocalJSX.EclSelect & JSXBase.HTMLAttributes<HTMLEclSelectElement>;
            "ecl-site-header": LocalJSX.EclSiteHeader & JSXBase.HTMLAttributes<HTMLEclSiteHeaderElement>;
            "ecl-social-media-follow": LocalJSX.EclSocialMediaFollow & JSXBase.HTMLAttributes<HTMLEclSocialMediaFollowElement>;
            "ecl-social-media-follow-item": LocalJSX.EclSocialMediaFollowItem & JSXBase.HTMLAttributes<HTMLEclSocialMediaFollowItemElement>;
            "ecl-social-media-share": LocalJSX.EclSocialMediaShare & JSXBase.HTMLAttributes<HTMLEclSocialMediaShareElement>;
            "ecl-social-media-share-item": LocalJSX.EclSocialMediaShareItem & JSXBase.HTMLAttributes<HTMLEclSocialMediaShareItemElement>;
            "ecl-spacing": LocalJSX.EclSpacing & JSXBase.HTMLAttributes<HTMLEclSpacingElement>;
            "ecl-spinner": LocalJSX.EclSpinner & JSXBase.HTMLAttributes<HTMLEclSpinnerElement>;
            "ecl-tag": LocalJSX.EclTag & JSXBase.HTMLAttributes<HTMLEclTagElement>;
            "ecl-text": LocalJSX.EclText & JSXBase.HTMLAttributes<HTMLEclTextElement>;
            "ecl-textarea": LocalJSX.EclTextarea & JSXBase.HTMLAttributes<HTMLEclTextareaElement>;
            "ecl-timeline": LocalJSX.EclTimeline & JSXBase.HTMLAttributes<HTMLEclTimelineElement>;
            "ecl-timeline-item": LocalJSX.EclTimelineItem & JSXBase.HTMLAttributes<HTMLEclTimelineItemElement>;
        }
    }
}
